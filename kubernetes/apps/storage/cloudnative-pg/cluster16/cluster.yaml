---
# yaml-language-server: $schema=https://kochhaus-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres16
spec:
  instances: 3
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.6-v0.4.0
  primaryUpdateStrategy: unsupervised
  storage:
    size: 20Gi
    storageClass: openebs-hostpath
  superuserSecret:
    name: &secret cloudnative-pg16-secret
  enableSuperuserAccess: true
  postgresql:
    shared_preload_libraries:
      - "vectors.so"
    parameters:
      max_connections: "200"
      shared_buffers: 256MB
  resources:
    requests:
      cpu: 50m
      memory: 512Mi
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://postgres16/
      endpointURL: https://s3.${SECRET_DOMAIN}
      # endpointURL: http://rook-ceph-rgw-ceph-objectstore.storage.svc.cluster.local # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: postgres16-001
      s3Credentials:
        accessKeyId:
          name: *secret
          key: MINIO_CNPG_KEY
        secretAccessKey:
          name: *secret
          key: MINIO_CNPG_SECRET
  # # Note: previousCluster needs to be set to the name of the previous
  # # cluster when recovering from an existing cnpg cluster
  # bootstrap:
  #   recovery:
  #     source: &previousCluster postgres-v13
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
