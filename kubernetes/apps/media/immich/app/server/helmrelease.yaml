---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich-server
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  dependsOn:
    - name: dragonfly-operator
      namespace: storage

  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false

  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 1003
        runAsGroup: 100
        fsGroup: 100
        fsGroupChangePolicy: OnRootMismatch

      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app

    controllers:
      immich-server:
        annotations:
          configmap.reloader.stakater.com/reload: &configMap immich-configmap
          secret.reloader.stakater.com/reload: &secret immich-secret

        initContainers:
          01-init-db:
            envFrom: &envFrom
              - configMapRef:
                  name: *configMap
              - secretRef:
                  name: *secret

            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: "16.6"

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.126.1

            env:
              # Ports
              SERVER_PORT: &port 2283

            envFrom: *envFrom

            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                memory: 4096Mi

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: *port
                  failureThreshold: 30
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 1

    service:
      app:
        controller: immich-server
        ports:
          http:
            port: *port

    ingress:
      app:
        className: external
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: Photo management and backup
          gethomepage.dev/group: media
          gethomepage.dev/icon: sh-immich.svg
          gethomepage.dev/name: immich

        hosts:
          - host: &host photos.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      library:
        enabled: true
        existingClaim: immich-nfs
        globalMounts:
          - path: /usr/src/app/upload
            subPath: img/immich

      geocoding-dump:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /usr/src/app/.reverse-geocoding-dump
      transformers-cache:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /usr/src/app/.transformers_cache
