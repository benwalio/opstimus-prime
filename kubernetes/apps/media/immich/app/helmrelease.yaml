---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  dependsOn:
    - name: dragonfly-operator
      namespace: storage

  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false

  values:
    controllers:
      server:
        annotations: &annotations
          configmap.reloader.stakater.com/reload: &configMap immich-configmap
          secret.reloader.stakater.com/reload: &secret immich-secret

        pod: &pod
          automountServiceAccountToken: false
          enableServiceLinks: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 1003
            runAsGroup: 100
            fsGroup: 100
            fsGroupChangePolicy: "OnRootMismatch"
            seccompProfile: { type: "RuntimeDefault" }
            supplementalGroups:
              - 1000
              - 568

        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.5@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: *secret

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.135.3
              pullPolicy: IfNotPresent

            env:
              # Ports
              SERVER_PORT: &serverPort 2283
              IMMICH_MEDIA_LOCATION: &mediaLocation /usr/src/app/upload

            envFrom: &envFrom
              - configMapRef:
                  name: *configMap
              - secretRef:
                  name: *secret

            resources:
              requests:
                cpu: 100m
                memory: 256M
              limits:
                memory: 4G

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: *serverPort
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: *serverPort
                  failureThreshold: 30
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 1

      machine-learning:
        annotations: *annotations

        pod: *pod

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.135.3@sha256:9f2f61d86af82d04926f9b896c995c502303052905517c5485dd26bf1e42a44e
              pullPolicy: IfNotPresent

            envFrom: *envFrom

            env:
              MPLCONFIGDIR: "/cache/matplotlib"
              IMMICH_MEDIA_LOCATION: *mediaLocation

      # redis:
      #   containers:
      #     app:
      #       image:
      #         repository: public.ecr.aws/docker/library/redis
      #         tag: 8.0.3@sha256:a1e0a3b3a6cedd74d8ba44805b2497b93851a296f08a44962fedc03f1c490b47
      #       env:
      #         REDIS_REPLICATION_MODE: master
      #       command: ["redis-server"]


    service:
      server:
        controller: server
        ports:
          http:
            port: *serverPort
      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003
      # redis:
      #   controller: redis
      #   ports:
      #     http:
      #       port: 6379

    ingress:
      server:
        className: external
        annotations:
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "180"
          nginx.ingress.kubernetes.io/proxy-body-size: 1024m
          nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            chunked_transfer_encoding off;

          ## homepage
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: Photo management and backup
          gethomepage.dev/group: media
          gethomepage.dev/icon: sh-immich.svg
          gethomepage.dev/name: immich

        hosts:
          - host: &host photos.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: server
                  port: http

    persistence:
      library:
        enabled: true
        existingClaim: immich-nfs
        globalMounts:
          - path: *mediaLocation
            subPath: img/immich

      machine-learning-cache:
        existingClaim: immich-machine-learning-cache
        advancedMounts:
          machine-learning:
            app:
              - path: /cache
                subPath: cache
              - path: /.cache
                subPath: dotCache

      tmpfs:
        type: emptyDir
        advancedMounts:
          server:
            app:
              - path: /usr/src/app/.reverse-geocoding-dump
                subPath: geocoding
              - path: /usr/src/app/.transformers_cache
                subPath: transformers

      matplotlib:
        type: emptyDir
        advancedMounts:
          server:
            app:
              - path: /config/matplotlib
